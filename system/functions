#! /bin/sh

# Create a new directory and enter it
function mk() {
  mkdir -p "$@" && cd "$@"
}

function rmde(){
	for dir in `find . -type d -empty -print`; do
   	echo $dir
		rm -d $dir
	done
}

# No arguments: `git status`, else acts like `git`
g() {
  if [[ $# > 0 ]]; then
    git $@
  else
    git status
  fi
}

# This creates a new playground with the name given as a command line arg
play () {
	# TODO : redirect io to /dev/null and write custom messages
	if [ $# -lt 1 ] ; then
		cd "$PATH_TO_PLAYGROUND" && echo 'In playground'
	fi
	mkdir -p $PATH_TO_PLAYGROUND/$1 && cd $PATH_TO_PLAYGROUND/$1
	echo "In playground $1"
}

# Normalize `open` across Linux, macOS, and Windows.
# This is needed to make the `o` function (see below) cross-platform.
if [ ! $(uname -s) = 'Darwin' ]; then
	if grep -q Microsoft /proc/version; then
		# Ubuntu on Windows using the Linux subsystem
		alias open='explorer.exe';
	else
		alias open='xdg-open';
	fi
fi

# `o` with no arguments opens the current directory, otherwise opens the given location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

function ssh_key(){
	file="$HOME/.ssh/id_rsa.pub"
	if [ ! -f "$file" ]; then
		ssh-keygen -t rsa
	fi

	cat "$file"
}

# https://routley.io/tech/2017/11/23/logbook.html
# Update: https://dev.to/luke/using-a-text-editor-for-task-tracking-ckf
function logbook() {
	DATE=$(date '+%Y-%m-%d')
	FPATH=~/Notebook/logbook/$DATE.md
	if [ ! -f $FPATH ]; then
		echo -e "# $DATE\n" >> $FPATH
    fi
	vim $FPATH
}

# Usage: extract <file>
# Description: extracts archived files / mounts disk images
# Note: .dmg/hdiutil is macOS-specific.
#
# credit: http://nparikh.org/notes/zshrc.txt
extract () {
    if [ -f $1 ]; then
        case $1 in
            *.tar.bz2)  tar -jxvf $1                        ;;
            *.tar.gz)   tar -zxvf $1                        ;;
            *.bz2)      bunzip2 $1                          ;;
            *.dmg)      hdiutil mount $1                    ;;
            *.gz)       gunzip $1                           ;;
            *.tar)      tar -xvf $1                         ;;
            *.tbz2)     tar -jxvf $1                        ;;
            *.tgz)      tar -zxvf $1                        ;;
            *.zip)      unzip $1                            ;;
            *.ZIP)      unzip $1                            ;;
            *.pax)      cat $1 | pax -r                     ;;
            *.pax.Z)    uncompress $1 --stdout | pax -r     ;;
            *.rar)      unrar x $1                          ;;
            *.Z)        uncompress $1                       ;;
            *)          echo "'$1' cannot be extracted/mounted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

function cleanup(){
	# https://www.maketecheasier.com/8-ways-to-maintain-a-clean-lean-ubuntu-machine/
	figlet ".cleanup"
	echo '-- Convert WEBP to PNG --'
	find ~/Downloads -name "*.webp" -exec dwebp {} -o {}.png \;

	echo '-- Run classifier --'
	classifier -d ~/Downloads

	if [ -d "/home/jarek/Downloads/WEBP" ]; then
		echo '-- Remove WEBP directory --'
		rm -r /home/jarek/Downloads/WEBP
	fi

	echo '-- Empty the trash'
	gio trash --empty
}

# update all packages
function update(){
	sudo apt update
	sudo apt full-upgrade -y
	flatpak update --assumeyes
	sudo snap refresh
}

# save current installed packages to $DOTFILES/current directory
function current(){
	installers=(
		snap
		flatpak
		pip
	)

	for installer in "${installers[@]}"
	do
	sudo $installer list > $DOTFILES/current/$installer.md
	done

	apt list --installed > $DOTFILES/current/apt.md
	code --list-extensions > $DOTFILES/current/vscode.md
}

# create a copy of a file/directory with appended .backup
function backup() { #<filename>
    cp $1{,.backup};
}

# -- use case
# $ ls -l | nline 5
function nline {
    [ -x $1 ] && NLINES=2 || NLINES=$1
    {
        awk '{ if (NR%'$NLINES'==0) { print "\033[1;44m" $0 "\033[0m" } else { print $0} }'
    }
}

# create data driven directory
# https://spin.atomicobject.com/2019/03/17/organize-one-off-task-files/
function workdir() {
    dir="$HOME/datedwork/"`date "+%Y.%m.%d"`"-$1"
    mkdir -p $dir
    cd $dir
}

# ---------------------------------
# Reference:
# ---------------------------------
# https://github.com/mathiasbynens/dotfiles/blob/master/.functions
# https://github.com/nicksp/dotfiles/blob/master/bin/ssh-key
#
# https://github.com/alexanderepstein/Bash-Snippets
# https://github.com/Bash-it/bash-it
# https://github.com/stephenturner/oneliners
# ---------------------------------
# Don't make edits below this
[ -f ".functions.local" ] && source ".functions.local"